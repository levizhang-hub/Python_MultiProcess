Python真正想利用多核来提高运行效率的话只能使用多核技术也就是多进程技术
import multiprocessing as mp


Q值利用
def job(q):
      res=0
      for i in range(10000):
            res+=i
      q.put(res)

q=mp.Queue()
p1=mp.multiprocessing(target=job1,args=(q,))
p1.start()
p1.join()

res1=q.get()


计算时间
import time
s_t=time.time()
...
...
...
print('cost time is: ',time.time()-s_t)
通过普通计算，多线程计算，多进程计算，只有多进程计算的时间才是最短的


//进程池
//规定使用cpu核是两个
def job(x):
    return x*x

pool=mp.Pool(process=2)
res=pool.map(job,range(10))

另外一种方式只能一个数，不能多个
res = pool.apply_async(job, (2,))
print(res.get())

要想同时计算多个得这么用
multi_res =[pool.apply_async(job, (i,)) for i in range(10)]
print([res.get() for res in multi_res])


多进程锁mp.Lock的使用，应用于数据共享，多进程之间不能通过全局变量的形式来共享数据，只能通过共享数据，mp.Value
l=mp.Lock()
锁住
l.acquire()
解锁
l.release()


